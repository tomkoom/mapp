type ICRC1Account = record { owner : principal; subaccount : opt vec nat8 };
type ICRC1TransferArgs = record {
  to : ICRC1Account;
  fee : opt nat;
  memo : opt vec nat8;
  from_subaccount : opt vec nat8;
  created_at_time : opt nat64;
  amount : nat;
};
type ICRC1TransferError = variant {
  GenericError : _InlineICRC1TransferErrorGenericError;
  TemporarilyUnavailable;
  BadBurn : _InlineICRC1TransferErrorBadBurn;
  Duplicate : _InlineICRC1TransferErrorDuplicate;
  BadFee : _InlineICRC1TransferErrorBadFee;
  CreatedInFuture : _InlineICRC1TransferErrorCreatedInFuture;
  TooOld;
  InsufficientFunds : _InlineICRC1TransferErrorInsufficientFunds;
};
type ICRC1Value = variant {
  Int : int;
  Nat : nat;
  Blob : vec nat8;
  Text : text;
};
type ManualReply = variant { Ok : nat; Err : ICRC1TransferError };
type Proposal = record {
  id : nat;
  votes_no : Tokens;
  voters : vec principal;
  state : ProposalState;
  timestamp : nat64;
  proposer : principal;
  votes_yes : Tokens;
  payload : ProposalPayload;
};
type ProposalPayload = record {
  description : text;
  position : _InlineProposalPayloadPosition;
};
type ProposalState = variant {
  Failed : text;
  Open;
  Executing;
  Rejected;
  Succeeded;
  Accepted;
};
type Tokens = record { amount_e8s : nat };
type User = record { id : text };
type _InlineICRC1TransferErrorBadBurn = record { min_burn_amount : nat };
type _InlineICRC1TransferErrorBadFee = record { expected_fee : nat };
type _InlineICRC1TransferErrorCreatedInFuture = record { ledger_time : nat64 };
type _InlineICRC1TransferErrorDuplicate = record { duplicate_of : nat };
type _InlineICRC1TransferErrorGenericError = record {
  message : text;
  error_code : nat;
};
type _InlineICRC1TransferErrorInsufficientFunds = record { balance : nat };
type _InlineProposalPayloadPosition = record { lat : float32; lng : float32 };
service : () -> {
  addProposal : (ProposalPayload) -> (opt Proposal);
  addUser : (principal) -> (opt User);
  getProposals : () -> (vec Proposal) query;
  getUserById : (principal) -> (opt User) query;
  getUsers : () -> (vec User) query;
  icrc1_balance_of : (ICRC1Account) -> (nat) query;
  icrc1_metadata : () -> (vec record { text; ICRC1Value }) query;
  icrc1_transfer : (ICRC1TransferArgs) -> (ManualReply);
  userExists : (principal) -> (bool) query;
  vote : (nat, nat, text) -> (opt Proposal);
}